private static async Task<IResult> AdjustBrightnessContrast(HttpContext context, [FromForm] BrightnessContrastDto dto)
{
    var fileService = context.RequestServices.GetRequiredService<IFileService>();
    var logger = context.RequestServices.GetRequiredService<ILogger<Program>>();

    if (dto.VideoFile == null || dto.VideoFile.Length == 0)
    {
        return Results.BadRequest("Video file is required");
    }

    // שמירת קובץ הווידאו שהועלה
    string inputFileName = await fileService.SaveUploadedFileAsync(dto.VideoFile);
    string inputFilePath = fileService.GetFullInputPath(inputFileName);

    // יצירת שם קובץ פלט ייחודי
    string extension = Path.GetExtension(dto.VideoFile.FileName);
    string outputFileName = await fileService.GenerateUniqueFileNameAsync(extension);
    string outputFilePath = fileService.GetFullOutputPath(outputFileName);

    List<string> filesToCleanup = new() { inputFileName, outputFileName };

    try
    {
        // הפקודה להרצת FFmpeg עם בראייטנס וקונטרסט
        string ffmpegArgs = $"-i \"{inputFilePath}\" -vf eq=brightness={dto.Brightness}:contrast={dto.Contrast} -c:a copy \"{outputFilePath}\"";

        var process = new Process
        {
            StartInfo = new ProcessStartInfo
            {
                FileName = "ffmpeg",
                Arguments = ffmpegArgs,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            }
        };

        process.Start();
        string stderr = await process.StandardError.ReadToEndAsync();
        await process.WaitForExitAsync();

        if (process.ExitCode != 0)
        {
            logger.LogError("FFmpeg brightness/contrast command failed: {Error}", stderr);
            return Results.Problem("Failed to adjust brightness/contrast: " + stderr, statusCode: 500);
        }

        // קריאת קובץ הפלט
        byte[] outputBytes = await fileService.GetOutputFileAsync(outputFileName);

        // ניקוי הקבצים הזמניים
        _ = fileService.CleanupTempFilesAsync(filesToCleanup);

        return Results.File(outputBytes, "video/mp4", $"edited_{dto.VideoFile.FileName}");
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "Error processing brightness/contrast request");
        _ = fileService.CleanupTempFilesAsync(filesToCleanup);
        return Results.Problem("An unexpected error occurred: " + ex.Message, statusCode: 500);
    }
}
